#!/usr/bin/env python
MKSPECTRUM_DOC="""
Usage:
   mkspectrum <siarray1> <scoutres> (<posfile> | --pos <row> <col>) <outdir> [ --kspace=<file> --sires=<int> ]

Options:
  -h --help This helpful message.
  --res     resolution of of scout (max values of pos) instead of file
  --pos     provide single row and column instead of posfile
  --kspace=<file> use kspace generated by matlab (lossy, but will match other spectrum)
  --sires=<int>      siarray matrix size (def 24x24). currently only supports square matrices

  scoutres  resolution of mprage in scout space (FOV where pos were placed)
  siarray1  CSI data file like siarray.1.1
  posfile   ascii file each line is a row col coordnate pair. tab or space separated
  outdir    directory to save the spectrum_row.col file(s)
  
"""
import numpy as np
from docopt import docopt

from siarray import Scout, SIArray

def update_args(opt):
    """read or set positions. set sires default"""
    # pos = np.array([[130,99], [121, 94], [113, 89]])
    if opt.get("<posfile>"):
        pos = np.loadtxt(opt["<posfile>"])
    else:
        pos = np.array([[float(opt["<row>"]), float(opt["<col>"])]])

    # make sure we have the right dimensions
    assert pos.shape[1] == 2

    # 20230530: default to luna 24x24. Bertocci has 16x16?
    # int(opt.get('--sires', '24')) errors hen None..but why not use default
    sires = int(opt.get('--sires')) if opt.get('--sires') else 24

    opt['sires'] = sires
    opt['pos'] = pos
    return opt

def parse_opt():
    """parse options in files documentation"""
    opt = docopt(MKSPECTRUM_DOC)
    return update_args(opt)

def mkspectrum(opt):
    """use options to read in scout and SI file and run ReconCoordinates3"""
    scout = Scout(None, res=int(opt["<scoutres>"]))
    SI = SIArray(opt["<siarray1>"], res=(opt['sires'],opt['sires']))

    # match matlab
    if opt.get("--kspace"):
        with open(opt.get("--kspace"), "r") as f:
            SI.kspace = np.fromfile(f, "<4f")

    s, f = SI.ReconCoordinates3(scout, opt['pos'], opt["<outdir>"])
    print(s)

if __name__ == "__main__":
    opt = parse_opt()
    mkspectrum(opt)
